// first step of tesselation shader
// tesselation control shader add/deletes control points and determines the tesselatation level
// patch has three control points here (three vertices for each triangle)


#version 450 core
layout (vertices =3) out;

float GetTessLevel(float dist1, float dist2);

// vectors stored as arrays - each patch has three vertices, each with an xyz pos and xyz norm value 
//posVS = position from Vertex Shader, posTC = position from this Tesselation Control shader

in vec3 posVS[];
//in vec2 UVCoords[];


out vec3 posTC[] ;
//out vec2 UVCoords[];
//out vec3 normTC[];

uniform vec3 eyePos;

void main()
{
  // tesselation level; we wil find this automatically later but for now hardcoded value

   float eyeToVertexDist0 = distance(eyePos, posVS[0]);
   float eyeToVertexDist1 = distance(eyePos, posVS[1]);
   float eyeToVertexDist2 = distance(eyePos, posVS[2]);

   // gpu can calculate each control point in parallel
   // tesselation level same for entire patch so only need to set it once (for the first control point)
   // gl_invocation called for each control point

   if (gl_InvocationID==0)
   {
		   // Calculate the tessellation levels
          gl_TessLevelOuter[0] = GetTessLevel(eyeToVertexDist1, eyeToVertexDist2) ; 
          gl_TessLevelOuter[1] = GetTessLevel(eyeToVertexDist2, eyeToVertexDist0) ; 
          gl_TessLevelOuter[2] = GetTessLevel(eyeToVertexDist0, eyeToVertexDist1) ;
          gl_TessLevelInner[0] = gl_TessLevelOuter[2] ; 

   }

   // pass through position and normal information
   posTC[gl_InvocationID]  = posVS[gl_InvocationID] ;
   //normTC[gl_InvocationID] = UVCoords[gl_InvocationID] ;

}

float GetTessLevel(float dist1, float dist2) {

   float avgDist = (dist1 + dist2)/2 ;
   //use avgDist to find tessalation level

   if (avgDist < 50.0) {
        return 55.0;
    }
    else if (avgDist < 40.0) {
        return 45.0;
    }
    else 
        return 1.0;
    

   }